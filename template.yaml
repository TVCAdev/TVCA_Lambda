AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  TVCA-app

  Sample SAM Template for TVCA-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30

Parameters:
  FirebaseClientEmail:
    Type: String

  FirebasePrivateKey:
    Type: String

  FirebaseProjectId:
    Type: String

  LineChannelAccessToken:
    Type: String

  LineChannelSecret:
    Type: String

  WhereAreYouLocationUrl:
    Type: String

  WhereAreYouUrlToken:
    Type: String

  AlexaEnterleaveSkillId:
    Type: String

  CameraDataLocationUrl:
    Type: String

  CameraDataUrlToken:
    Type: String

  CameraDataOrigFileName:
    Type: String

  CameraDataPrevFileName:
    Type: String

Resources:
  ###############
  # API GATEWAY #
  ###############
  LineExpressApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: LineApiGateway
      EndpointConfiguration:
        Type: REGIONAL
      StageName: work

  WebsocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: WebsocketApiGateway
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  WebsocketApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref WebsocketApi
      StageName: work
      AutoDeploy: true

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Sub integrations/${ConnectIntegration}

  ConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebsocketLambdaFunction.Arn}/invocations

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Sub integrations/${DisconnectIntegration}

  DisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebsocketLambdaFunction.Arn}/invocations

  SendCamDataRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApi
      RouteKey: SendCamData
      AuthorizationType: NONE
      OperationName: SendCamDataRoute
      Target: !Sub integrations/${SendCamDataIntegration}

  SendCamDataIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebsocketLambdaFunction.Arn}/invocations

  #############
  # SNS TOPIC #
  #############
  CamDataTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: CamDataTopic

  ##########
  # LAYERS #
  ##########
  LineLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: LineLayer
      ContentUri: layers/layer_line/
      CompatibleRuntimes:
        - nodejs18.x
      CompatibleArchitectures:
        - arm64

  ExpressLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: ExpressLayer
      ContentUri: layers/layer_express/
      CompatibleRuntimes:
        - nodejs18.x
      CompatibleArchitectures:
        - arm64

  FirebaseLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: FirebaseLayer
      ContentUri: layers/layer_firebase/
      CompatibleRuntimes:
        - nodejs18.x
      CompatibleArchitectures:
        - arm64

  AlexaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: AlexaLayer
      ContentUri: layers/layer_alexa/
      CompatibleRuntimes:
        - nodejs18.x
      CompatibleArchitectures:
        - arm64

  AwsSdkLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: AwsSdkLayer
      ContentUri: layers/layer_awssdk/
      CompatibleRuntimes:
        - nodejs18.x
      CompatibleArchitectures:
        - arm64

  ToolsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: ToolsLayer
      ContentUri: layers/layer_tools/
      CompatibleRuntimes:
        - nodejs18.x
      CompatibleArchitectures:
        - arm64

  ###################
  # LAMBDA FUNCTION #
  ###################
  LineLambdaFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: LineLambdaFunction
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      CodeUri: lambdas/line_lambda/
      Description: ""
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          FIREBASE_CLIENT_EMAIL: !Ref FirebaseClientEmail
          FIREBASE_PRIVATE_KEY: !Ref FirebasePrivateKey
          FIREBASE_PROJECT_ID: !Ref FirebaseProjectId
          LINE_CHANNEL_ACCESS_TOKEN: !Ref LineChannelAccessToken
          LINE_CHANNEL_SECRET: !Ref LineChannelSecret
          WHERE_ARE_YOU_LOCATION_URL: !Ref WhereAreYouLocationUrl
          WHERE_ARE_YOU_URL_TOKEN: !Ref WhereAreYouUrlToken
          CAMERA_DATA_LOCATION_URL: !Ref CameraDataLocationUrl
          CAMERA_DATA_URL_TOKEN: !Ref CameraDataUrlToken
          CAMERA_DATA_ORIGFILENAME: !Ref CameraDataOrigFileName
          CAMERA_DATA_PREVFILENAME: !Ref CameraDataPrevFileName
      Layers:
        - !Ref AwsSdkLayer
        - !Ref ExpressLayer
        - !Ref FirebaseLayer
        - !Ref LineLayer
        - !Ref ToolsLayer
      Events:
        LineApiRootEvent:
          Type: Api
          Properties:
            RestApiId: !Ref LineExpressApi
            Path: /
            Method: ANY
        LineApiGreedyEvent:
          Type: Api
          Properties:
            RestApiId: !Ref LineExpressApi
            Path: /{proxy+}
            Method: ANY
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        Minify: false
        OutExtension:
          - .js=.mjs
        EntryPoints:
          - index.ts
        External:
          - "@aws-sdk/client-apigatewaymanagementapi"
          - "@aws-sdk/client-sns"
          - "@vendia/serverless-express"
          - "express"
          - "@line/bot-sdk"
          - "firebase-admin/app"
          - "firebase-admin"
          - "firebase-admin/firestore"
          - "date-fns"

  AlexaLambdaFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: AlexaLambdaFunction
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      CodeUri: lambdas/alexa_lambda/
      Description: ""
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          ALEXA_ENTERLEAVE_SKILL_ID: !Ref AlexaEnterleaveSkillId
          FIREBASE_CLIENT_EMAIL: !Ref FirebaseClientEmail
          FIREBASE_PRIVATE_KEY: !Ref FirebasePrivateKey
          FIREBASE_PROJECT_ID: !Ref FirebaseProjectId
      Layers:
        - !Ref FirebaseLayer
        - !Ref AlexaLayer
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - index.ts
        External:
          - "ask-sdk-core"
          - "firebase-admin"
          - "firebase-admin/app"
          - "firebase-admin/firestore"

  WebsocketLambdaFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: WebsocketLambdaFunction
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      CodeUri: lambdas/websocket_lambda/
      Description: ""
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          FIREBASE_CLIENT_EMAIL: !Ref FirebaseClientEmail
          FIREBASE_PRIVATE_KEY: !Ref FirebasePrivateKey
          FIREBASE_PROJECT_ID: !Ref FirebaseProjectId
          CAMDATA_TOPIC_ARN: !Ref CamDataTopic
      Layers:
        - !Ref AwsSdkLayer
        - !Ref FirebaseLayer
        - !Ref ToolsLayer
      Events:
        WebsocketConnectEvent:
          Type: Api
          Properties:
            RestApiId: !Ref WebsocketApi
            Path: /{proxy+}
            Method: $connect
        WebsocketDisconnectEvent:
          Type: Api
          Properties:
            RestApiId: !Ref WebsocketApi
            Path: /{proxy+}
            Method: $disconnect
        WebsocketSendCamDataEvent:
          Type: Api
          Properties:
            RestApiId: !Ref WebsocketApi
            Path: /{proxy+}
            Method: SendCamData
    DependsOn: WebsocketApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        Minify: false
        OutExtension:
          - .js=.mjs
        EntryPoints:
          - index.ts
        External:
          - "@aws-sdk/client-apigatewaymanagementapi"
          - "@aws-sdk/client-sns"
          - "firebase-admin/app"
          - "firebase-admin"
          - "firebase-admin/firestore"
          - "aws-sdk"

  WebsocketLambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt WebsocketLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketApi}/work/*
    DependsOn: WebsocketApi

  SnsLambdaFunction:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: SnsLambdaFunction
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      CodeUri: lambdas/sns_lambda/
      Description: ""
      MemorySize: 128
      Timeout: 30
      Environment:
        Variables:
          FIREBASE_CLIENT_EMAIL: !Ref FirebaseClientEmail
          FIREBASE_PRIVATE_KEY: !Ref FirebasePrivateKey
          FIREBASE_PROJECT_ID: !Ref FirebaseProjectId
          LINE_CHANNEL_ACCESS_TOKEN: !Ref LineChannelAccessToken
          LINE_CHANNEL_SECRET: !Ref LineChannelSecret
          CAMERA_DATA_LOCATION_URL: !Ref CameraDataLocationUrl
          CAMERA_DATA_URL_TOKEN: !Ref CameraDataUrlToken
          CAMERA_DATA_ORIGFILENAME: !Ref CameraDataOrigFileName
          CAMERA_DATA_PREVFILENAME: !Ref CameraDataPrevFileName
      Layers:
        - !Ref LineLayer
        - !Ref FirebaseLayer
        - !Ref ToolsLayer
      Events:
        SnsCamDataEvent:
          Type: SNS
          Properties:
            Topic: !Ref CamDataTopic
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        Minify: false
        OutExtension:
          - .js=.mjs
        EntryPoints:
          - index.ts
        External:
          - "@line/bot-sdk"
          - "firebase-admin/app"
          - "firebase-admin"
          - "firebase-admin/firestore"
          - "date-fns"

  #############
  # LOG GROUP #
  #############
  LineLambdaFuncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${LineLambdaFunction}
      RetentionInDays: 7
    DependsOn: LineLambdaFunction

  AlexaLambdaFuncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AlexaLambdaFunction}
      RetentionInDays: 7
    DependsOn: AlexaLambdaFunction

  WebsocketLambdaFuncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${WebsocketLambdaFunction}
      RetentionInDays: 7
    DependsOn: WebsocketLambdaFunction

  SnsLambdaFuncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${SnsLambdaFunction}
      RetentionInDays: 7
    DependsOn: SnsLambdaFunction

Outputs:
  # ServerloessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  #  HelloWorldApi:
  #    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
  #    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  LineLambdaFunction:
    Description: "Line Lambda Function ARN"
    Value: !GetAtt LineLambdaFunction.Arn
  AlexaLambdaFunction:
    Description: "Alexa Lambda Function ARN"
    Value: !GetAtt AlexaLambdaFunction.Arn
  WebsocketLambdaFunction:
    Description: "Websocket Lambda Function ARN"
    Value: !GetAtt WebsocketLambdaFunction.Arn
  SnsLambdaFunction:
    Description: "Sns Lambda Function ARN"
    Value: !GetAtt SnsLambdaFunction.Arn
